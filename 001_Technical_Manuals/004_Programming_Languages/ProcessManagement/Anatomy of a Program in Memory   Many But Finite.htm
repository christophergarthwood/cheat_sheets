<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Gustavo Duarte">
      
<!-- Global site tag (gtag.js) - Google Analytics -->
<script type="text/javascript" async="" src="Anatomy%20of%20a%20Program%20in%20Memory%20%20%20Many%20But%20Finite_files/analytics.js"></script><script async="" src="Anatomy%20of%20a%20Program%20in%20Memory%20%20%20Many%20But%20Finite_files/js"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-3204790-2');
</script>


  
  <title>Anatomy of a Program in Memory | Many But Finite</title>
  <meta name="description" content="Memory management is the heart of operating systems; it is crucial for both programming and system administration. In the next few posts I'll cover memory ">
<meta property="og:type" content="article">
<meta property="og:title" content="Anatomy of a Program in Memory">
<meta property="og:url" content="https://manybutfinite.com/post/anatomy-of-a-program-in-memory/index.html">
<meta property="og:site_name" content="Many But Finite">
<meta property="og:description" content="Memory management is the heart of operating systems; it is crucial for both programming and system administration. In the next few posts I'll cover memory with an eye towards practical aspects, but w">
<meta property="og:image" content="http://static.duartes.org/img/blogPosts/kernelUserMemorySplit.png">
<meta property="og:image" content="http://static.duartes.org/img/blogPosts/virtualMemoryInProcessSwitch.png">
<meta property="og:image" content="http://static.duartes.org/img/blogPosts/linuxFlexibleAddressSpaceLayout.png">
<meta property="og:image" content="http://static.duartes.org/img/blogPosts/fragmentedHeap.png">
<meta property="og:image" content="http://static.duartes.org/img/blogPosts/mappingBinaryImage.png">
<meta property="og:image" content="http://static.duartes.org/img/blogPosts/linuxClassicAddressSpaceLayout.png">
<meta property="og:updated_time" content="2017-11-22T20:39:29.000Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="Anatomy of a Program in Memory">
<meta name="twitter:description" content="Memory management is the heart of operating systems; it is crucial for both programming and system administration. In the next few posts I'll cover memory with an eye towards practical aspects, but w">
<meta name="twitter:image" content="http://static.duartes.org/img/blogPosts/kernelUserMemorySplit.png">
<meta name="twitter:creator" content="@https://twitter.com/manybutfinite">
  
    <link rel="alternate" href="https://manybutfinite.com/feed.xml" title="Many But Finite" type="application/atom+xml">
  
    <link rel="icon" href="https://manybutfinite.com/theme/images/favicon.ico">
    <link href="Anatomy%20of%20a%20Program%20in%20Memory%20%20%20Many%20But%20Finite_files/css.css" rel="stylesheet" type="text/css">
    <link href="Anatomy%20of%20a%20Program%20in%20Memory%20%20%20Many%20But%20Finite_files/font-awesome.css" rel="stylesheet">
    <link rel="stylesheet" href="Anatomy%20of%20a%20Program%20in%20Memory%20%20%20Many%20But%20Finite_files/bootstrap.css">

  <link rel="stylesheet" href="Anatomy%20of%20a%20Program%20in%20Memory%20%20%20Many%20But%20Finite_files/mbf.css">
</head>
<body>

    <div class="masthead">
    <div role="banner" class="container masthead">
      <h1><a href="https://manybutfinite.com/">Many But Finite</a></h1>
      <h2>Tech and science for curious people.</h2>
    </div>
</div>

    <nav class="navbar navbar-default" role="navigation">
    <div class="container" id="blogNav">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="https://manybutfinite.com/">Blog</a>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav">
                <li>
                    <a href="https://manybutfinite.com/archives">Archives</a>
                </li>
                <li><a href="https://manybutfinite.com/about/">About</a></li>
                <li>
                    <a href="https://manybutfinite.com/subscribe/">
                    Subscribe</a>
                </li>

                <li>
                    <a href="https://twitter.com/manybutfinite" title="follow me">
                        <i class="fa fa-twitter"></i>
                    </a>
                </li>
            </ul>
        </div><!-- /.navbar-collapse -->
    </div><!-- /.container -->
</nav>

    <div id="main" class="container">
        <div id="content"> 
<div class="row no-gutters">
    <div class="col-lg-10">
        <article>
            <header>
                <h1 class="entry-title">
                    <a href="https://manybutfinite.com/post/anatomy-of-a-program-in-memory/">Anatomy of a Program in Memory</a>
                </h1>
                <p class="meta">
                    <time datetime="2009-01-27T14:34:13.000Z">Jan 27th, 2009</time>
                </p>
            </header>
            <div class="entry-content">
                 <p>Memory management is the heart of operating systems;
 it is crucial for both programming and system administration. In the 
next few posts I'll cover memory with an eye towards practical aspects, 
but without shying away from internals. While the concepts are generic, 
examples are mostly from Linux and Windows on 32-bit x86. This first 
post describes how programs are laid out in memory.</p> <p>Each process in a multi-tasking OS runs in its own memory sandbox. This sandbox is the <strong>virtual address space</strong>, which in 32-bit mode is <strong>always a 4GB block of memory addresses</strong>. These virtual addresses are mapped to physical memory by <strong>page tables</strong>,
 which are maintained by the operating system kernel and consulted by 
the processor. Each process has its own set of page tables, but there is
 a catch. Once virtual addresses are enabled, they apply to <em>all software</em> running in the machine, <em>including the kernel itself</em>. Thus a portion of the virtual address space must be reserved to the kernel:</p> <p align="center"><img src="Anatomy%20of%20a%20Program%20in%20Memory%20%20%20Many%20But%20Finite_files/kernelUserMemorySplit.png" alt="Kernel/User Memory Split"></p> <p>This does <strong>not</strong>
 mean the kernel uses that much physical memory, only that it has that 
portion of address space available to map whatever physical memory it 
wishes. Kernel space is flagged in the page tables as exclusive to <a href="http://duartes.org/gustavo/blog/post/cpu-rings-privilege-and-protection" target="_blank" rel="noopener">privileged code</a>
 (ring 2 or lower), hence a page fault is triggered if user-mode 
programs try to touch it. In Linux, kernel space is constantly present 
and maps the same physical memory in all processes. Kernel code and data
 are always addressable, ready to handle interrupts or system calls at 
any time. By contrast, the mapping for the user-mode portion of the 
address space changes whenever a process switch happens:</p> <p align="center"><img src="Anatomy%20of%20a%20Program%20in%20Memory%20%20%20Many%20But%20Finite_files/virtualMemoryInProcessSwitch.png" alt="Process Switch Effects on Virtual Memory"></p> <p>Blue
 regions represent virtual addresses that are mapped to physical memory,
 whereas white regions are unmapped. In the example above, Firefox has 
used far more of its virtual address space due to its legendary memory 
hunger. The distinct bands in the address space correspond to <strong>memory segments</strong> like the heap, stack, and so on. Keep in mind these segments are simply a range of memory addresses and <em>have nothing to do</em> with <a href="http://duartes.org/gustavo/blog/post/memory-translation-and-segmentation" target="_blank" rel="noopener">Intel-style segments</a>. Anyway, here is the standard segment layout in a Linux process:</p> <p align="center"><img src="Anatomy%20of%20a%20Program%20in%20Memory%20%20%20Many%20But%20Finite_files/linuxFlexibleAddressSpaceLayout.png" alt="Flexible Process Address Space Layout In Linux"></p> <p>When computing was happy and safe and cuddly, the starting virtual addresses for the segments shown above were <strong>exactly the same</strong>
 for nearly every process in a machine. This made it easy to exploit 
security vulnerabilities remotely. An exploit often needs to reference 
absolute memory locations: an address on the stack, the address for a 
library function, etc. Remote attackers must choose this location 
blindly, counting on the fact that address spaces are all the same. When
 they are, people get pwned. Thus address space randomization has become
 popular. Linux randomizes the <a href="http://lxr.linux.no/linux+v2.6.28.1/fs/binfmt_elf.c#L542" target="_blank" rel="noopener">stack</a>,  <a href="http://lxr.linux.no/linux+v2.6.28.1/arch/x86/mm/mmap.c#L84" target="_blank" rel="noopener">memory mapping segment</a>, and <a href="http://lxr.linux.no/linux+v2.6.28.1/arch/x86/kernel/process_32.c#L729" target="_blank" rel="noopener">heap</a>
 by adding offsets to their starting addresses. Unfortunately the 32-bit
 address space is pretty tight, leaving little room for randomization 
and <a href="http://www.stanford.edu/~blp/papers/asrandom.pdf" target="_blank" rel="noopener">hampering its effectiveness</a>.</p> <p>The
 topmost segment in the process address space is the stack, which stores
 local variables and function parameters in most programming languages. 
Calling a method or function pushes a new <strong>stack frame</strong> 
onto the stack. The stack frame is destroyed when the function returns. 
This simple design, possible because the data obeys strict <a href="http://en.wikipedia.org/wiki/Lifo" target="_blank" rel="noopener">LIFO</a>
 order, means that no complex data structure is needed to track stack 
contents - a simple pointer to the top of the stack will do. Pushing and
 popping are thus very fast and deterministic. Also, the constant reuse 
of stack regions tends to keep active stack memory in the <a href="http://duartes.org/gustavo/blog/post/intel-cpu-caches" target="_blank" rel="noopener">cpu caches</a>, speeding up access. Each thread in a process gets its own stack.</p> <p>It
 is possible to exhaust the area mapping the stack by pushing more data 
than it can fit. This triggers a page fault that is handled in Linux by <a href="http://lxr.linux.no/linux+v2.6.28/mm/mmap.c#L1716" target="_blank" rel="noopener">expand_stack()</a>, which in turn calls <a href="http://lxr.linux.no/linux+v2.6.28/mm/mmap.c#L1544" target="_blank" rel="noopener">acct_stack_growth()</a> to check whether it's appropriate to grow the stack. If the stack size is below <tt>RLIMIT_STACK</tt>
 (usually 8MB), then normally the stack grows and the program continues 
merrily, unaware of what just happened. This is the normal mechanism 
whereby stack size adjusts to demand. However, if the maximum stack size
 has been reached, we have a <strong>stack overflow</strong> and the 
program receives a Segmentation Fault. While the mapped stack area 
expands to meet demand, it does not shrink back when the stack gets 
smaller. Like the federal budget, it only expands.</p> <p>Dynamic stack growth is the <a href="http://lxr.linux.no/linux+v2.6.28.1/arch/x86/mm/fault.c#L692" target="_blank" rel="noopener">only situation</a>
 in which access to an unmapped memory region, shown in white above, 
might be valid. Any other access to unmapped memory triggers a page 
fault that results in a Segmentation Fault. Some mapped areas are 
read-only, hence write attempts to these areas also lead to segfaults.</p> <p>Below
 the stack, we have the memory mapping segment. Here the kernel maps 
contents of files directly to memory. Any application can ask for such a
 mapping via the Linux <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mmap.2.html" target="_blank" rel="noopener">mmap()</a> system call (<a href="http://lxr.linux.no/linux+v2.6.28.1/arch/x86/kernel/sys_i386_32.c#L27" target="_blank" rel="noopener">implementation</a>) or <a href="http://msdn.microsoft.com/en-us/library/aa366537(VS.85).aspx" target="_blank" rel="noopener">CreateFileMapping()</a> / <a href="http://msdn.microsoft.com/en-us/library/aa366761(VS.85).aspx" target="_blank" rel="noopener">MapViewOfFile()</a>
 in Windows. Memory mapping is a convenient and high-performance way to 
do file I/O, so it is used for loading dynamic libraries. It is also 
possible to create an <strong>anonymous memory mapping</strong> that 
does not correspond to any files, being used instead for program data. 
In Linux, if you request a large block of memory via <a href="http://www.kernel.org/doc/man-pages/online/pages/man3/malloc.3.html" target="_blank" rel="noopener">malloc()</a>, the C library will create such an anonymous mapping instead of using heap memory. 'Large' means larger than <tt>MMAP_THRESHOLD</tt> bytes, 128 kB by default and adjustable via <a href="http://www.kernel.org/doc/man-pages/online/pages/man3/undocumented.3.html" target="_blank" rel="noopener">mallopt()</a>.</p> <p>Speaking
 of the heap, it comes next in our plunge into address space. The heap 
provides runtime memory allocation, like the stack, meant for data that 
must outlive the function doing the allocation, unlike the stack. Most 
languages provide heap management to programs. Satisfying memory 
requests is thus a joint affair between the language runtime and the 
kernel. In C, the interface to heap allocation is <a href="http://www.kernel.org/doc/man-pages/online/pages/man3/malloc.3.html" target="_blank" rel="noopener">malloc()</a> and friends, whereas in a garbage-collected language like C# the interface is the <tt>new</tt> keyword.</p> <p>If
 there is enough space in the heap to satisfy a memory request, it can 
be handled by the language runtime without kernel involvement. Otherwise
 the heap is enlarged via the <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/brk.2.html" target="_blank" rel="noopener">brk()</a> system call (<a href="http://lxr.linux.no/linux+v2.6.28.1/mm/mmap.c#L248" target="_blank" rel="noopener">implementation</a>) to make room for the requested block. Heap management is <a href="http://g.oswego.edu/dl/html/malloc.html" target="_blank" rel="noopener">complex</a>,
 requiring sophisticated algorithms that strive for speed and efficient 
memory usage in the face of our programs' chaotic allocation patterns. 
The time needed to service a heap request can vary substantially. 
Real-time systems have <a href="http://rtportal.upv.es/rtmalloc/" target="_blank" rel="noopener">special-purpose allocators</a> to deal with this problem. Heaps also become <em>fragmented</em>, shown below:</p> <p align="center"><img src="Anatomy%20of%20a%20Program%20in%20Memory%20%20%20Many%20But%20Finite_files/fragmentedHeap.png" alt="Fragmented Heap"></p> <p>Finally,
 we get to the lowest segments of memory: BSS, data, and program text. 
Both BSS and data store contents for static (global) variables in C. The
 difference is that BSS stores the contents of <em>uninitialized</em> 
static variables, whose values are not set by the programmer in source 
code. The BSS memory area is anonymous: it does not map any file. If you
 say <tt>static int cntActiveUsers</tt>, the contents of <tt>cntActiveUsers</tt> live in the BSS.</p> <p>The data segment, on the other hand, holds the contents for static variables initialized in source code. This memory area <strong>is not anonymous</strong>. It maps the part of the program's binary image that contains the initial static values given in source code. So if you say <tt>static int cntWorkerBees = 10</tt>, the contents of cntWorkerBees live in the data segment and start out as 10. Even though the data segment maps a file, it is a <strong>private memory mapping</strong>,
 which means that updates to memory are not reflected in the underlying 
file. This must be the case, otherwise assignments to global variables 
would change your on-disk binary image. Inconceivable!</p> <p>The data example in the diagram is trickier because it uses a pointer. In that case, the <em>contents</em> of pointer <tt>gonzo</tt>
 - a 4-byte memory address - live in the data segment. The actual string
 it points to does not, however. The string lives in the <strong>text</strong>
 segment, which is read-only and stores all of your code in addition to 
tidbits like string literals. The text segment also maps your binary 
file in memory, but writes to this area earn your program a Segmentation
 Fault. This helps prevent pointer bugs, though not as effectively as 
avoiding C in the first place. Here's a diagram showing these segments 
and our example variables:</p> <p align="center"><img src="Anatomy%20of%20a%20Program%20in%20Memory%20%20%20Many%20But%20Finite_files/mappingBinaryImage.png" alt="ELF Binary Image Mapped Into Memory"></p> <p>You can examine the memory areas in a Linux process by reading the file <tt>/proc/pid_of_process/maps</tt>.
 Keep in mind that a segment may contain many areas. For example, each 
memory mapped file normally has its own area in the mmap segment, and 
dynamic libraries have extra areas similar to BSS and data. The next 
post will clarify what 'area' really means. Also, sometimes people say 
"data segment" meaning all of data + bss + heap.</p> <p>You can examine binary images using the <a href="http://manpages.ubuntu.com/manpages/intrepid/en/man1/nm.1.html" target="_blank" rel="noopener">nm</a> and <a href="http://manpages.ubuntu.com/manpages/intrepid/en/man1/objdump.1.html" target="_blank" rel="noopener">objdump</a>
 commands to display symbols, their addresses, segments, and so on. 
Finally, the virtual address layout described above is the "flexible" 
layout in Linux, which has been the default for a few years. It assumes 
that we have a value for <tt>RLIMIT_STACK</tt>. When that's not the case, Linux reverts back to the "classic" layout shown below:</p> <p align="center"><img src="Anatomy%20of%20a%20Program%20in%20Memory%20%20%20Many%20But%20Finite_files/linuxClassicAddressSpaceLayout.png" alt="Classic Process Address Space Layout In Linux"></p> <p>That's
 it for virtual address space layout. The next post discusses how the 
kernel keeps track of these memory areas. Coming up we'll look at memory
 mapping, how file reading and writing ties into all this and what 
memory usage figures mean.</p>
<p><a href="https://manybutfinite.com/comments/anatomy.html">189 Comments</a></p>

            </div>
            <footer>
                <div class="inner clearfix">
                    <div class="socialNav">
                    <div class="socialNav">
    <ul class="socialNav">
        <li style="float:left">
            <a href="https://twitter.com/manybutfinite" title="follow on Twitter">
                <span class="circle"><i class="fa fa-twitter"></i></span>
            </a>
        </li>
        <li style="float:right">
            <a href="mailto:manybutfinite@duartes.org" title="email me">
                <span class="circle">@</span>
            </a>
        </li>
        <li>
            <a href="https://manybutfinite.com/feed.xml" rel="subscribe-rss" title="subscribe via RSS">
                <span class="circle"><i class="fa fa-rss"></i></span>
            </a>
        </li>
    </ul>
</div>

                    </div>
                </div>

                

<form class="form-inline subscribe" style="margin-bottom:14px">
  <div class="form-group">
    <label style="font-size:14px;display:block" for="emailInput">One-click subscription:</label>
    <div class="input-group" style="">
      <input id="emailInput" class="form-control email" size="40" placeholder="Email address">
    </div>
      <button type="submit" class="btn btn-primary">Subscribe</button>
    <p class="bg-warning">Please enter a valid email address.</p>
    <p class="bg-primary">Thank you for signing up.</p>
    <p class="bg-danger">Server error. Please try again.</p>
  </div>
</form>


                <p class="meta-footer">
                    <i class="fa fa-user"></i>
                    <span>Posted by <span>Gustavo Duarte</span></span>
                    <i class="fa fa-calendar"></i>
                    <time datetime="2009-01-27T14:34:13.000Z">Jan 27th, 2009</time>

                    
                        <i class="fa fa-tags"></i>
                        <span class="categories">
                        <a class="category" href="https://manybutfinite.com/category/software-illustrated/">software illustrated</a>, <a class="category" href="https://manybutfinite.com/category/internals/">internals</a>, <a class="category" href="https://manybutfinite.com/category/linux/">linux</a>
                        </span>
                    
                </p>
                <p>
                
                    <a href="https://manybutfinite.com/post/getting-physical-with-memory/" title="Previous Post: Getting Physical With Memory">« Getting Physical With Memory</a>
                

                
                    <a style="float:right" href="https://manybutfinite.com/post/how-the-kernel-manages-your-memory/" title="Next Post: How The Kernel Manages Your Memory">How The Kernel Manages Your Memory »</a>
                
                </p>
            </footer>
        </article>
        
    </div>
    <aside class="sidebar col-lg-2">
        <section class="panel panel-default titleFont">
  <div class="panel-heading">
    <h3 class="panel-title">Recent Posts</h3>
  </div>

  <div id="recent_posts" class="list-group">
    
    <a class="list-group-item " href="https://manybutfinite.com/post/iphones-armed-robbery-hacking/">iPhones, Armed Robbery, and Hacking</a>
    
    <a class="list-group-item " href="https://manybutfinite.com/post/goto-and-the-folly-of-dogma/">Goto and the folly of dogma</a>
    
    <a class="list-group-item " href="https://manybutfinite.com/post/launching-grokbit/">Grokbit</a>
    
    <a class="list-group-item " href="https://manybutfinite.com/post/home-row-computing-on-mac/">Home Row Computing on Macs</a>
    
    <a class="list-group-item " href="https://manybutfinite.com/post/system-calls/">System Calls Make the World Go Round</a>
    
  </div>
</section>

<div>
    <a href="https://manybutfinite.com/about/" title="about">
        <img src="Anatomy%20of%20a%20Program%20in%20Memory%20%20%20Many%20But%20Finite_files/circleChai120px.png" alt="Author and his dog Chai" style="display: block;margin:40px auto">
    </a>
</div>



<form class="form-group text-center subscribe" style="margin-bottom:14px">
  <div class="form-group">
    <label style="font-size:14px;" for="emailInput">One-click subscription:</label>
    <div class="input-group" style="margin-bottom:4px">
      <input id="emailInput" class="form-control email" size="40" placeholder="Email address">
    </div>
      <button type="submit" class="btn btn-primary">Subscribe</button>
    <p class="bg-warning">Please enter a valid email address.</p>
    <p class="bg-primary">Thank you for signing up.</p>
    <p class="bg-danger">Server error. Please try again.</p>
  </div>
</form>


<div class="socialNav">
    <ul class="socialNav">
        <li style="float:left">
            <a href="https://twitter.com/manybutfinite" title="follow on Twitter">
                <span class="circle"><i class="fa fa-twitter"></i></span>
            </a>
        </li>
        <li style="float:right">
            <a href="mailto:manybutfinite@duartes.org" title="email me">
                <span class="circle">@</span>
            </a>
        </li>
        <li>
            <a href="https://manybutfinite.com/feed.xml" rel="subscribe-rss" title="subscribe via RSS">
                <span class="circle"><i class="fa fa-rss"></i></span>
            </a>
        </li>
    </ul>
</div>


    </aside>
</div>
</div>
    </div>
    <div id="footer">
    <div class="container">
        <p>
          Copyright © 2008-2018 Gustavo Duarte -
          <span class="credit">Powered by <a href="http://hexo.io/" target="_blank">Hexo</a></span>
        </p>
    </div>

</div>
    <script src="Anatomy%20of%20a%20Program%20in%20Memory%20%20%20Many%20But%20Finite_files/jquery.js"></script>
<script src="Anatomy%20of%20a%20Program%20in%20Memory%20%20%20Many%20But%20Finite_files/bootstrap.js"></script>
<script src="Anatomy%20of%20a%20Program%20in%20Memory%20%20%20Many%20But%20Finite_files/mbf.js"></script>





</body></html>